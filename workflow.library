#!/bin/bash
#printf "%s\n" "Successfully loaded workflow library" >> debug.txt;
#printf "%s\n" "version:$(pwd)" >> debug.txt;


fake_master_branch="testmaster";




as_number()
{
        local the_version=`cut -d'v' -f2 <<< $1`

        tv=$(echo $the_version | sed 's/\.//g');

        echo $tv;
}

function join { local IFS="$1"; shift; echo "$*"; }


publish_to_staging_and_exclude(){

	printf "Staging will EXCLUDE features [%s] from latest QA branch\n" "$1" >> debug.txt;
	publish_to_staging $1 "exclude"

}

publish_to_staging_and_include(){

	printf "Staging will INCLUDE all APPROVED PRs for features [%s] in latest QA branch\n" "$1" >> debug.txt;
	publish_to_staging $1 "include"

}


publish_to_staging()
{
		
		IFS=',' read -ra features_list <<< "$1";

		include_or_exclude_feature_flag="$2";

		if [ -z "$2" ]
		then
			printf "ALL approved PRs from latest QA branch will be merged to Staging\n" >> debug.txt;
		fi;
		
		#current_tag=get_current_version_number;
		staging_found=$(git branch | grep "^\s*staging");

		if [ -z "$staging_found" ]
		then
			printf "LOCAL Staging branch was not found for this repo. No need to purge\n" >> debug.txt;
		else
			printf "Purging local staging and rebuilding\n" >> debug.txt;

			$(run_cmd "git branch -D staging");		
		fi;

		remote_staging=$(git branch -r | grep "^\s*staging");

		if [ -z "$remote_staging" ]
			then
				printf "The REMOTE Staging branch was not found for this repo. No need to purge\n" >> debug.txt;
			else
				printf "Purging REMOTE staging and rebuilding\n" >> debug.txt;
				$(run_cmd "git push origin --delete staging");
			
		fi;

		ignore=$(create_or_checkout_feature staging);

		#$(git checkout -b staging);
		last_production_push=($(git log --pretty=format:%ct -n 1));

		#echo ${last_production_push[@]};

		printf "Last production push was [%s]\n" "${last_production_push[@]}" >> debug.txt;

		#IFS="," read id status branch feature mergedate <<< "$i";

		IFS="," read production_build <<< "${last_production_push[@]}"

        arr=($(hub pr list -L 100 -s merged -f '%i,%pC%pS,%B,%H,%mt,%sm '))

        params=();

        for i in "${arr[@]}"
        do
                IFS="," read id status branch feature mergeddate sha <<< "$i";

                #echo "branch is ${branch} and feature is ${feature}";

                #mynum=$(as_number $branch);

                #ctag=$(as_number $current_tag);
               

                if [[ $mergeddate -gt $production_build ]]

                then
                		if [[ "${include_or_exclude_feature_flag}"  == "exclude" ]]
                		then
	                		#Did user send list of features to --exclude from stage
	                		if [[ ! " ${features_list[@]} " =~ " ${feature} " ]] 
	                		then

		                		printf "feature [%s] [%s] created after last production build [%s]...Adding to staging now\n"   "$feature" "$mergeddate" "$production_build"  >> debug.txt;

		                		#ignore=$(run_cmd "create_or_checkout_feature $feature");

		                		$(run_cmd "git merge $feature");

		                		if [ $? != 0 ];
		                		then
		                			printf "Failed to merge feature branch no longer exists [%s]\n" "$feature" >> debug.txt;
		                		else
		                			printf "Merged feature %s with commit id [%s] into staging\n" "$feature" "$sha">> debug.txt;
		                		fi;
		                        #echo "feature $feature should be added because $mynum is greater than $ctag";
		                        params+=("$feature");
	                		else	
		                    	printf "skipping feature [%s] since user specified this value on command line\n" "$feature" >> debug.txt;
	                    	fi;
	                    elif [[ "${include_or_exclude_feature_flag}" == "include" ]]
	                    then
	                    		#Did user send list of features to --exclude from stage
		                		if [[ " ${features_list[@]} " =~ " ${feature} " ]] 
		                		then
			                		printf "feature [%s] [%s] created after last production build [%s]...Adding to staging now\n"   "$feature" "$mergeddate" "$production_build"  >> debug.txt;

			                		#ignore=$(run_cmd "create_or_checkout_feature $feature");

			                		$(run_cmd "git merge $feature");

			                		if [ $? != 0 ];
			                		then
			                			printf "Failed to merge feature branch no longer exists [%s]\n" "$feature" >> debug.txt;
			                		else
			                			printf "Merged feature %s with commit id [%s] into staging\n" "$feature" "$sha">> debug.txt;
			                		fi;
			                        #echo "feature $feature should be added because $mynum is greater than $ctag";
			                        params+=("$feature");
		                		else	
			                    	printf "skipping feature [%s] since user specified this value on command line\n" "$feature" >> debug.txt;
		                    	fi;
	                    else
	                    	
	                    	printf "feature [%s] [%s] created after last production build [%s]...Adding to staging now\n"   "$feature" "$mergeddate" "$production_build"  >> debug.txt;

	                		#ignore=$(run_cmd "create_or_checkout_feature $feature");

	                		$(run_cmd "git merge $feature");

	                		if [ $? != 0 ];
	                		then
	                			printf "Failed to merge feature branch no longer exists [%s]\n" "$feature" >> debug.txt;
	                		else
	                			printf "Merged feature %s with commit id [%s] into staging\n" "$feature" "$sha">> debug.txt;
	                		fi;
	                        #echo "feature $feature should be added because $mynum is greater than $ctag";
	                        params+=("$feature");	
                    	fi;
                fi;

        done

        $(run_cmd "git push -u origin staging");

        $(run_cmd "git checkout ${params[0]}");
}



increment_version_number () {
	local latest_tag=$(git tag | sort -o g.txt && tail -1 g.txt)
	printf "%s\n" "Call to increment_version_number" >> debug.txt;
	local tag_version=`cut -d'v' -f2 <<< $latest_tag`
	$(rm g.txt)
	printf "%s\n" "Latest Release Tag is $tag_version" >> debug.txt;
	local tag_version_as_number=`echo $tag_version | sed 's/\.//g'`
	local new_tag_version_as_number=$(($tag_version_as_number + 1))
	local new_tag_version_as_string=`echo v$new_tag_version_as_number | sed 's/\([0-9]\)/\1\./g' | sed 's/\.$//g'`
	printf "Returing new tag version as string $new_tag_version_as_string\n" >> debug.txt;
	printf "Returning new tag version as number $new_tag_version_as_number\n" >> debug.txt;
	echo $new_tag_version_as_string;
}

get_current_version_number () {

	local latest_tag=$(git tag | sort -o version.txt &&  tail -1 version.txt)
        local tag_version=`cut -d'v' -f2 <<< $latest_tag`
	$(rm version.txt)
	printf "Current Release Number is v$tag_version\n" >> debug.txt;
	echo "v$tag_version";

}

# Input feature name
create_or_checkout_feature () {
	#get current release version to branch from
	current_release_tag=$(get_current_version_number);

	ignore=(git fetch);

	if [ $(test_branch_for_existence "$1") == 0 ];
	then
		#branch feature from current release tag
		trash_msg=$(git checkout -b $1 $current_release_tag && git push --set-upstream origin $1);
		
		printf "%s\n" "Created branch $1 from last good production release [$current_release_tag]" >> debug.txt;
	else
		b=$(git checkout $1 && git pull origin $1)
		printf "%s\n%s" "Working on branch $1" "$b" >> debug.txt;

	fi

	echo 0;

}

build_release_from_staging(){

	staging_branch=$(git branch -r | grep staging);

	staging_create_date=$(git show --summary --pretty=format:%ct `git merge-base staging $1`);

	last_production_push=$(git log --pretty=format:%ct -n 1);

	if [ -z "$staging_branch" ]
	then
		printf "\nStaging Branch Not Found. Nothing to release... Exiting\n" >> error.txt;
	
	else

		printf "%s\n" "step1=git checkout $1" >> debug.txt;

		$(run_cmd "git checkout $1");

		$(run_cmd "git pull");

		new_tag_number=$(increment_version_number);

		$(run_cmd "git fetch");

		last_commit_date=$(git log -n 1 | grep Date | cut -d':' -f2 -f3 | (read lstring; echo "$lstring:60"));

		printf "%s\n" "Before merge into $1 the last_commit_date is $last_commit_date" >> debug.txt;

		printf "%s\n" "step2=git merge staging" >> debug.txt;

		$(run_cmd "git merge --no-ff staging");

		$(echo "Releasing version $new_tag_number from staging to Production" > out.txt);
		lines=$(git log --oneline --after="$last_commit_date");
		
		
		
		if [ -z "$lines" ]
		then
			printf "\nNothing new to release to production... Exiting\n" >> debug.txt;
			exit 0;
		else
			printf "%s\n" "Log Messages Read since $last_commit_date" >> debug.txt;
			$(git log --oneline --after="$last_commit_date" >> out.txt);
			$(cat out.txt >> debug.txt);
			printf "%s\n" "step2=git merge staging" >> debug.txt;
		fi;

		$(run_cmd "git push -u origin $1");
		printf "\n%s\n" "step3=git tag -a $new_tag_number $1 -F out.txt" >> debug.txt;
		#$(rm out.txt);
		#$(run_cmd "git tag -a v$current_qa_tag_version $1 -m '$new_log_messages'");
		$(git tag -a $new_tag_number $1 -F out.txt);
		printf "%s\n" "step4=git push origin $new_tag_number" >> debug.txt;
		$(run_cmd "git push origin $new_tag_number");
		if [ "$?" == 0 ];
		then
			printf "%s\n" "Successfully released changes of $new_tag_number from staging to $1" >> debug.txt;
			$(run_cmd "rm out.txt");
		fi;
	fi;

}

release_features () {

	#get latest QA branch
	#if no open pull requests, merge with master and tag master with latest QA branch version number
	#else stop and inform the user to review the pull requests

	qa_branches_sorted=$(git branch -r | grep QA | sort -o sortbranches.txt)
        latest_qa_branch=$(tail -1 sortbranches.txt)
        qa_branch_length=${#latest_qa_branch}
        $(rm sortbranches.txt)
        #if qa branch not found,
        #create qa branch based off last master release tag
        #else increment qa_branch version
        #and create new qa branch from release tag
        if [ ${qa_branch_length} == 0 ];
        then
        	printf "\nNo Suitable QA Release Branches found. Exiting\n" >> error.txt;
               	printf "Run this command after features are released to QA and all pull requests are resolved" >> error.txt;
        else
		printf "%s\n" "Latest QA branch is $latest_qa_branch" >> debug.txt;
                local current_qa_tag_version=`cut -d'v' -f2 <<< $latest_qa_branch`
		pull_requests=$(hub pr list -L 10 -b "QAv$current_qa_tag_version");
		if [ -z "$pull_requests" ];
               	then
			#ok to merge to master	
			printf "%s\n" "step1=git checkout QAv$current_qa_tag_version && git pull && git checkout master && git pull" >> debug.txt;
			$(run_cmd "git checkout QAv$current_qa_tag_version");
			$(run_cmd "git pull");
			
			$(run_cmd "git checkout $1"); 
			$(run_cmd "git pull origin");
			last_commit_date=$(git log -n 1 | grep Date | cut -d':' -f2 -f3 | (read lstring; echo "$lstring:60"));
			printf "%s\n" "Before merge into $1 the last_commit_date is $last_commit_date" >> debug.txt;
			# Get log messages from QA branch to annotate the tag
			#last_commit_date=$(git log -n 1 | grep Date | cut -d':' -f2 -f3 -f4);
			#Artficially set last commit time to last second of the current minute. 
			#This will force this commit and all previous to be ignored by git log
			#when I use the git log --after="some date" cmd later
			#git log does not by default exclude the date/time you specify in this arg. oh well 
			#last_commit_date=$(git log -n 1 | grep Date | cut -d':' -f2 -f3 -f4);
			#last_commit_date=$(git log -n 1 | grep Date | cut -d':' -f2 -f3 | (read lstring; echo "$lstring:60"));

			printf "%s\n" "step2=git merge QAv$current_qa_tag_version" >> debug.txt;
			$(run_cmd "git merge --no-ff QAv$current_qa_tag_version");
			printf "%s\n" "Last commit date is $last_commit_date" >> debug.txt;
			$(echo "Releasing version v$current_qa_tag_version from QA to Production" > temp_merge_msg);
			$(git log --oneline --after="$last_commit_date" >> temp_merge_msg);
			
			#$(run_cmd "git commit -F out.txt");
			printf "%s\n" "Log Messages Read since $last_commit_date" >> debug.txt;
			$(cat temp_merge_msg >> debug.txt);
			mergeResult=$?;
			$(run_cmd "git push -u origin $1");
			#$(run_cmd "git status");
			printf "\n%s\n" "step3=git tag -a v$current_qa_tag_version $1 -F temp_merge_msg" >> debug.txt;
			#$(rm out.txt);
			#$(run_cmd "git tag -a v$current_qa_tag_version $1 -m '$new_log_messages'");
			$(git tag -a v$current_qa_tag_version $1 -F temp_merge_msg);
			printf "%s\n" "step4=git push origin v$current_qa_tag_version" >> debug.txt;
			$(run_cmd "git push origin v$current_qa_tag_version");

			if [ "$?" == 0 ];
				then
				printf "%s\n" "Pushed Changes of v$current_qa_tag_version master to repo" >> debug.txt;
				#abcd=$(git push);
			fi;
			if [ "$mergeResult" == 0 ];
			then
				#delete all remote branches and local branches of QA Releases
				#abc=$(git branch -r | grep QA |  while read x; do echo $x; q=$(cut -d'/' -f2 <<< $x); git push origin --delete $q; done);
			#delete all local branches
				x=1;
				#localcleanbranches=$(git branch | grep QA |  while read x; do echo $x; git branch -D $x; done);
			else
				printf "%s\n" "Experienced Error Merging.  Will exit so conflicts can be resolved by you.Run git status for more details" >> error.txt;
			fi;
			
		else
        	printf "\nNo Suitable QA Release Branches found. Exiting\n" >> error.txt;
               	printf "\nRun this command after features are released to QA and all pull requests are resolved\n" >> error.txt;
		printf "%s\n" "I see open pull requests in the QA Release branch. Please close and try again" >> error.txt;
		printf "%s\n" "$pull_requests" >> error.txt;
		fi;

	fi;
	
}



test_feature () {
	#Set delimiter locally to comma

	ignore=$(git fetch);

	printf "Branch names BEFORE is [%s]\n" "$1" >> debug.txt;
	generate_pull_request=$2;
	IFS=',' read -ra ADDR <<< "$1";

		qa_branches_sorted=$(git branch -r | grep QA | sort -o sortbranches.txt)
		latest_qa_branch=$(tail -1 sortbranches.txt)
		qa_branch_length=${#latest_qa_branch}
		$(rm sortbranches.txt)
		#if qa branch not found, 
		#create qa branch based off last master release tag
		#else increment qa_branch version 
		#and create new qa branch from release tag

		if [ "${qa_branch_length}" == 0 ]; 
		then 
			printf "\nQA Branch NOT found. Create Version from Release Tag\n" >> debug.txt;
			local release_tag_version_number=$(get_current_version_number);
			local next_version_number=$(increment_version_number);
			new_qa_branch=`echo QA$next_version_number`;
			printf "\nNew QA Branch is $new_qa_branch\n" >> debug.txt;
			local rsp=$(git checkout -b $new_qa_branch $release_tag_version_number);
		else 
		#QA Branch Found.  Branch new QA Branch from Current QA Branch (QA branches are unmodifyable because QA may actually be testing while you are trying to change the contents of QA release.  So just create new .1 release)  and merge ticket branch into new QA Branch
		printf "%s\nLatest QA branch is $latest_qa_branch" >> debug.txt;
		local current_qa_tag_version=`cut -d'v' -f2 <<< $latest_qa_branch`	
		local current_qa_tag_version_as_number=`echo $current_qa_tag_version | sed 's/\.//g'`

		
		# Test to see if open pull requests for current QA branch. Yes, use this branch.  
		# No, increment branch because branch is ready for QA testing and is officially closed
		printf "%s\nLooking for Open Pull Requests for QAv$current_qa_tag_version" >> debug.txt;
		pull_requests=$(hub pr list -L 1 -b "QAv$current_qa_tag_version");
		printf "%s\nOpen Pull Requests for QAv$current_qa_tag_version are [$pull_requests]\n" >> debug.txt;
			if [ -z "$pull_requests" ];
			then
			#increment to next QA branch
			local new_qa_tag_version_as_number=$(($current_qa_tag_version_as_number + 1))
			local new_qa_tag_version_as_string=`echo v$new_qa_tag_version_as_number | sed 's/\([0-9]\)/\1\./g' | sed 's/\.$//g'`
			new_qa_branch=`echo QA$new_qa_tag_version_as_string`;
			
			ignore=$(run_cmd "git checkout -b $new_qa_branch $latest_qa_branch");
			printf "qa Branch Found. Incremented it to $new_qa_tag_version_as_string\n" >> debug.txt; 
			
			else
			#else use current QA branch since it has open pull requests
			local new_qa_tag_version_as_string=`echo v$current_qa_tag_version_as_number| sed 's/\([0-9]\)/\1\./g' | sed 's/\.$//g'`;
			printf "\nReusing QA Branch Found Since it has open pull requests. [$new_qa_tag_version_as_string]\n" >> debug.txt; 
			new_qa_branch=`echo QA$new_qa_tag_version_as_string`;
			#$(run_cmd "git checkout $new_qa_branch"); 
			fi;
		fi;
	
		

		#Do a git pull of the QA branch to get all updates
		
		#ignore=$(git pull origin $new_qa_branch);

		#ignore=$(git pull origin $new_qa_branch);		


		#loop Through branches and test to see if valid
		found_good_branch=false;
		for i in "${ADDR[@]}"; do
   		 	# process "$i"
			printf "Processing Branch [%s]\n" $i >> debug.txt;
			if [ $(create_or_checkout_feature $i) == 0 ];
			then
				ignore=$(git checkout "$i");
				$(run_cmd "git push -u origin $i");
				#push new_qa_branch first for hub command
				
				ignore=$(git checkout "$new_qa_branch");
				ignore=$(git fetch)
				$(run_cmd "git push -u origin $new_qa_branch")

				printf "%s\n" "Generating Pull Request for $new_qa_branch <- $i" >> debug.txt;
				huburl=$(hub pull-request -h $i -m "Please review changes to $i" -b $new_qa_branch);
				printf "%s\n" "Pull Request URL is $huburl" >> debug.txt;
				found_good_branch=true;

				if [ $generate_pull_request == false ];
				then
        				#rsp2=$(update_commit_log_and_merge_branch "$i" "$new_qa_branch")
        				#$(run_cmd "git merge --no-ff $new_qa_branch");

					#		$(run_cmd "git push -u origin $i");
					#		$(run_cmd "git push -u origin $new_qa_branch")
					#		printf "%s\n" "Generating Pull Request for $new_qa_branch <- $i" >> debug.txt;
					#		huburl=$(hub pull-request -h $i -m "Auto reviewing changes to $i" -b $new_qa_branch);
			        		
			        		mergecmd=$(echo "$huburl" | cut -d '/' -f4 -f5 -f6)
			        		pull_request_id=$(echo "$huburl" | cut -d '/' -f7)
			        		mergecmd="/repos/${mergecmd}s/${pull_request_id}/merge";
			        		printf "Autoclosing Pull Request using cmd hub api -XPUT ${mergecmd} <- $i\n" >> debug.txt;
			        		$(run_cmd "hub api -XPUT ${mergecmd}");
			        	
        				
				#else
					#generate pull request
				#	$(run_cmd "git push -u origin $i");
					#push new_qa_branch first for hub command
				#	$(run_cmd "git push -u origin $new_qa_branch")
				#	printf "%s\n" "Generating Pull Request for $new_qa_branch <- $i" >> debug.txt;
				#	huburl=$(hub pull-request -h $i -m "Please review changes to $i" -b $new_qa_branch);
				#	printf "%s\n" "Pull Request URL is $huburl" >> debug.txt;
				fi;
					
			else
                	printf "Failed to find branch $i. So it WILL NOT be merged into this QA Release \n" >> error.txt;
			fi;
		done

		if [ "$found_good_branch" == true ];
		then
			ignore=$(git fetch)
			#$(run_cmd "git push -u origin $new_qa_branch")
			ignore=$(git pull origin $new_qa_branch)
			printf "\nSuccessfully pushed remote branch $new_qa_branch\n" >> debug.txt;
			
			$(run_cmd "git checkout ${ADDR[0]}");
			echo 0;
		else
            printf "Failed to find any valid branches to merge. Deleting Empty QA Release Branch $new_qa_branch\n" >> error.txt;
			#$(run_cmd "git checkout staging");
			#$(run_cmd "git branch -D $new_qa_branch");
			echo 1;
		fi;


}


test_branch_for_existence() {

	#$(run_cmd "git checkout $1"); 
	
	#$(run_cmd "git push -u origin $1");

    local trash_msg=$(git fetch);

	branch_exists=$(git branch -r | grep "\s*origin/$1$" | git branch | grep "\s*$1$");

	if [ -z "$branch_exists" ];
	  then
		#a=$(run_cmd "git pull");
		printf "$branch_exists does not exist...creating\n" >> debug.txt;
		echo 0;
	else
		echo 1;
		printf "$branch_exists already exists..performing git checkout\n" >> debug.txt;
	fi;

	#echo $?;

}


update_commit_log_and_merge_branch() {
	 var=$2
	$(run_cmd "git checkout $2");
        printf 'Merge branch %s into %s\n\n::SUMMARY::\nBranch %s commits:\n' $1 $var $1 >> temp_merge_msg 
        git log --format=format:'%s' $var..$1 >> temp_merge_msg 
        printf '\n\nBranch %s commits:\n' $var >> temp_merge_msg 
        git log --format=format:'%s' $1..$var >> temp_merge_msg  
        printf '\n\n* * * * * * * * * * * * * * * * * * * * * * * * *\n::DETAILS::\n' >> temp_merge_msg 
        git log --left-right $var...$1 >> temp_merge_msg
        $(run_cmd "git merge --no-ff $1");
        temp_merge_msg=$(echo $temp_merge_msg | tr "'", " ");
        ignore=$(git fetch)
        $(run_cmd "git commit -F temp_merge_msg"); 
	printf "Done Merging Branch $1 to $2\n" >> debug.txt;
}

short_circuit (){

	printf "%s\n" "Exiting Program" >> error.txt;
	cleanup_tmp_files;

}

cleanup_tmp_files () {
	printf "************************ GITHUB SERVER MESSAGES ************************\n";
	cat error.txt && rm error.txt;
	#clear;
	commits=$(cat temp_merge_msg);
	if [ -z "$commits" ];
		then
		x=1;
	else
		printf "\n*************************** COMMITS FOR THIS RELEASE ***************\n"; 
		cat temp_merge_msg && rm temp_merge_msg;
		#printf "\n*************************** ************************ ***************\n"; 
	fi;
	
	printf "\n*************************** DEBUG MSGS FOR THIS RELEASE ***************\n";
	cat debug.txt && rm debug.txt;
	printf "\n*************************** END OF DEBUG MSGS *************************\n";

	if [ -f out.txt ]
	then
		rm out.txt;
	fi;

	if [ -f temp_merge_msg ]
	then
		rm temp_merge_msg;
	fi;
}

setup_master_branch () {

	$(git ls-remote 1>masterbranch.txt 2>>error.txt); 

	$(grep "$1" masterbranch.txt 1>branch_found.txt 2>>error.txt); 


	count=$(wc -c < branch_found.txt | sed -e s/[[:space:]]//g);
	
	
	if [ $count == 0 ];
		then
		printf "%s\n" "Creating master branch [$1] since does not exist" >> debug.txt; 
		$(run_cmd "git checkout -b $1"); 
		$(run_cmd "git push -u origin $1");
	else
		printf "%s\n" "Master branch [$1] found. No need to recreate" >> debug.txt;
	
	fi;

	$(git ls-remote --tags 1>tagoutput.txt 2>>error.txt &&  grep v1.0.0 tagoutput.txt >base_tag_version_found.txt 2>>error.txt);

	count=$(wc -c < base_tag_version_found.txt | sed -e s/[[:space:]]//g);

	if [ $count == 0 ];
		then
		printf "%s\n" "No Release tags found. Initializing first tags for any future releases. Note: nothing pushed to production. Just initializing..." >> debug.txt;
		$(run_cmd "git tag v1.0.0");
		$(run_cmd "git push origin v1.0.0");
	fi;

	$(rm masterbranch.txt branch_found.txt tagoutput.txt base_tag_version_found.txt);
}

run_cmd () {

	

	result=$($1 1>>debug.txt 2>>error.txt);

	rtn=$?;

	if [ $rtn -gt  0 ]
		then
		 printf "%s\n" "Statement [$1] [$rtn] failed. Exiting..." >> error.txt;
		 $cleanup_tmp_files;
		 exit 1;
	fi;
		

	echo $result;
}
	

initialize_tmp_files () {

	$(echo "" > temp_merge_msg && echo "" > debug.txt && echo "" > error.txt);

}

$(initialize_tmp_files "$1");

if [ -z "$fake_master_branch" ]
	then
		result=$(setup_master_branch "master");
	else
		result=$(setup_master_branch "testmaster");
fi;
		

